{"version":3,"sources":["components/disk.jsx","components/tower.jsx","components/button.jsx","components/towerGroup.jsx","App.js","serviceWorker.js","index.js"],"names":["Disk","state","size","_this","props","sizePx","diskColors","1","2","3","4","5","6","7","8","9","10","11","12","13","14","styles","fontWeight","fontSize","width","height","display","background","padding","margin","react_default","a","createElement","className","style","this","React","Component","Tower","disks","id","maxDiscWidth","sumDisksHeight","paddingTop","textAlign","position","paddingBottom","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","marginBottom","Object","assign","console","log","length","Fragment","map","diskSize","components_disk","key","Button","onClick","TowerGroup","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","backgroundColor","towers","b","c","moves","solutionMoves","getMaxDiscWidth","_this2","sizes","keys","tower","concat","reduce","prev","current","_this3","_this4","components_tower","getSumDisksHeight","renderButton","_this5","components_button","handleClick","nextMove","pop","sleep","disk","shift","unshift","setState","ms","Promise","resolve","setTimeout","n","from","to","aux","App","towerGroup","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c3a6598.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Disk extends React.Component {\n  state = {\n    size: this.props.size,\n    sizePx: this.props.size * 20\n  };\n\n  diskColors = {\n    \"1\": \"red\",\n    \"2\": \"green\",\n    \"3\": \"blue\",\n    \"4\": \"yellow\",\n    \"5\": \"orange\",\n    \"6\": \"lightgrey\",\n    \"7\": \"purple\",\n    \"8\": \"pink\",\n    \"9\": \"black\",\n    \"10\": \"maroon\",\n    \"11\": \"olive\",\n    \"12\": \"dodgerBlue\",\n    \"13\": \"slateBlue\",\n    \"14\": \"MediumSeaGreen\"\n  };\n\n  styles = {\n    fontWeight: \"bold\",\n    fontSize: \"12px\",\n    width: this.state.sizePx + \"px\",\n    height: \"20px\",\n    display: \"block\",\n    background: this.diskColors[this.state.size],\n    padding: \"none\",\n    margin: \"auto\"\n  };\n\n  render() {\n    return (\n      <div className=\"disk\" style={this.styles}>\n        {this.state.size}\n      </div>\n    );\n  }\n}\n\nexport default Disk;\n","import React from \"react\";\nimport Disk from \"./disk\";\n\nclass Tower extends React.Component {\n  state = {\n    disks: this.props.disks,\n    id: this.props.id,\n    maxDiscWidth: this.props.maxDiscWidth,\n    sumDisksHeight: this.props.sumDisksHeight,\n    paddingTop: this.props.paddingTop,\n    styles: {\n      display: \"inline-block\",\n      textAlign: \"center\",\n      position: \"relative\",\n      width: this.props.maxDiscWidth * 20 + \"px\",\n      paddingBottom: 0,\n      backgroundImage:\n        \"url(\" +\n        \"https://upload.wikimedia.org/wikipedia/commons/5/58/Location_arithmetic_vertical.svg\" +\n        \")\",\n      backgroundPosition: \"center\",\n      backgroundSize: \"cover\",\n      backgroundRepeat: \"repeat-y\",\n      marginBottom: \"-10px\",\n      height: this.props.sumDisksHeight * 20\n    }\n  };\n\n  render() {\n    var styles = {};\n    const returnedTarget = Object.assign(styles, this.state.styles);\n    console.log(styles);\n    styles.paddingTop =\n      this.props.sumDisksHeight * 20 - this.props.disks.length * 20 + 20 + \"px\";\n    return (\n      <React.Fragment>\n        <div className=\"tower\" id={this.state.id} style={styles}>\n          {this.state.disks.map(diskSize => (\n            <Disk key={diskSize} size={diskSize} />\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Tower;\n","import React from \"react\";\n\nclass Button extends React.Component {\n  state = {};\n\n  styles = {};\n\n  render() {\n    return (\n      <button\n        className=\"button\"\n        style={this.styles}\n        onClick={this.props.onClick}\n      >\n        Click me\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React from \"react\";\nimport Tower from \"./tower\";\nimport Button from \"./button\";\n\nclass TowerGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      towers: {\n        a: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n        b: [],\n        c: []\n      },\n      moves: []\n    };\n    this.solutionMoves(this.getMaxDiscWidth(), \"a\", \"c\", \"b\");\n  }\n\n  styles = {\n    fontWeight: \"bold\",\n    fontSize: \"20px\",\n    padding: \"1em\",\n    textAlign: \"center\",\n    backgroundColor: \"grey\"\n  };\n\n  getMaxDiscWidth() {\n    // Create a single list of all disk sizes\n    var sizes = [];\n    Object.keys(this.state.towers).map(\n      tower => (sizes = sizes.concat(this.state.towers[tower]))\n    );\n    return sizes.reduce(function(prev, current) {\n      return prev > current ? prev : current;\n    });\n  }\n\n  getSumDisksHeight() {\n    var sizes = [];\n    // Create a single list of all disk sizes\n    Object.keys(this.state.towers).map(\n      tower => (sizes = sizes.concat(this.state.towers[tower]))\n    );\n    return sizes.length ? sizes.length : 0;\n  }\n\n  render() {\n    return (\n      <div id=\"game\">\n        <div id=\"towers\" className=\"container\" style={this.styles}>\n          {Object.keys(this.state.towers).map(tower => (\n            <Tower\n              key={tower}\n              disks={this.state.towers[tower]}\n              maxDiscWidth={this.getMaxDiscWidth()}\n              sumDisksHeight={this.getSumDisksHeight()}\n            />\n          ))}\n        </div>\n        {this.renderButton()}\n      </div>\n    );\n  }\n\n  renderButton() {\n    return <Button onClick={() => this.handleClick()} />;\n  }\n\n  async handleClick() {\n    var nextMove;\n    while ((nextMove = this.state.moves.pop())) {\n      await this.sleep(1);\n      console.log(nextMove);\n      var disk = this.state.towers[nextMove[0]].shift();\n      console.log(disk);\n      this.state.towers[nextMove[1]].unshift(disk);\n      this.setState({ towers: this.state.towers });\n    }\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  solutionMoves(n, from, to, aux) {\n    if (n === 1) {\n      this.state.moves.unshift([from, to]);\n      return;\n    } else {\n      this.solutionMoves(n - 1, from, aux, to);\n      this.solutionMoves(1, from, to, aux);\n      this.solutionMoves(n - 1, aux, to, from);\n    }\n  }\n}\n\nexport default TowerGroup;\n","import React, { Component } from \"react\";\nimport TowerGroup from \"./components/towerGroup\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <TowerGroup />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}